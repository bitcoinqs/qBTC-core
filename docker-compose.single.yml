services:
  # Single qBTC node - can be bootstrap or regular node
  qbtc-node:
    build: .
    container_name: ${CONTAINER_NAME:-qbtc-node}
    
    # IMPORTANT: For proper P2P connectivity, uncomment the following line:
    # network_mode: host
    # This allows the node to receive incoming connections directly
    # Note: When using host mode, remove the 'ports' section below
    
    environment:
      # Wallet configuration
      WALLET_PASSWORD: ${WALLET_PASSWORD}
      WALLET_FILE: ${WALLET_FILE:-wallet.json}
      
      # Security configuration
      RATE_LIMIT_ENABLED: ${RATE_LIMIT_ENABLED:-true}
      DDOS_PROTECTION_ENABLED: ${DDOS_PROTECTION_ENABLED:-true}
      ATTACK_PATTERN_DETECTION: ${ATTACK_PATTERN_DETECTION:-true}
      BOT_DETECTION_ENABLED: ${BOT_DETECTION_ENABLED:-true}
      PEER_REPUTATION_ENABLED: ${PEER_REPUTATION_ENABLED:-true}
      SECURITY_LOGGING_ENABLED: ${SECURITY_LOGGING_ENABLED:-true}
      
      # Redis configuration (optional)
      USE_REDIS: ${USE_REDIS:-false}
      REDIS_URL: ${REDIS_URL:-redis://redis:6379/0}
      
      # Rate limits (requests per minute)
      RATE_LIMIT_WORKER: ${RATE_LIMIT_WORKER:-10}
      RATE_LIMIT_BALANCE: ${RATE_LIMIT_BALANCE:-100}
      RATE_LIMIT_TRANSACTIONS: ${RATE_LIMIT_TRANSACTIONS:-50}
      RATE_LIMIT_DEFAULT: ${RATE_LIMIT_DEFAULT:-60}
    
    # Command format: [dht_port, gossip_port, --wallet, wallet_file, --Bootstrap_ip, bootstrap_ip, --Bootstrap_port, bootstrap_port]
    # For bootstrap node: use only first 4 args
    # For regular node: use all args
    command: ${NODE_COMMAND}
    
    ports:
      - "${WEB_PORT:-8080}:8080"     # Web API
      - "${RPC_PORT:-8332}:8332"     # RPC
      - "${DHT_PORT:-8001}:${DHT_PORT:-8001}/udp" # DHT UDP
      - "${GOSSIP_PORT:-8002}:${GOSSIP_PORT:-8002}" # Gossip TCP
    
    volumes:
      - ${DATA_DIR:-./data}:/app/ledger.rocksdb
      - ${LOG_DIR:-./logs}:/var/log/qbtc
    
    networks:
      - qbtc-network
    
    restart: unless-stopped
    
    security_opt:
      - no-new-privileges:true
    
    deploy:
      resources:
        limits:
          cpus: '${CPU_LIMIT:-1.0}'
          memory: ${MEMORY_LIMIT:-1G}
        reservations:
          cpus: '${CPU_RESERVATION:-0.25}'
          memory: ${MEMORY_RESERVATION:-256M}

  # Optional Redis for rate limiting
  redis:
    image: redis:7-alpine
    container_name: ${CONTAINER_NAME:-qbtc}-redis
    profiles:
      - with-redis
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis-data:/data
      - ${REDIS_CONFIG:-./config/redis.conf}:/usr/local/etc/redis/redis.conf:ro
    command: redis-server /usr/local/etc/redis/redis.conf
    networks:
      - qbtc-network
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp:noexec,nosuid,size=50m
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.1'
          memory: 128M

  # Optional monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: ${CONTAINER_NAME:-qbtc}-prometheus
    profiles:
      - monitoring
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    volumes:
      - ./monitoring/prometheus-single.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - qbtc-network
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    container_name: ${CONTAINER_NAME:-qbtc}-grafana
    profiles:
      - monitoring
    ports:
      - "${GRAFANA_PORT:-3000}:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin123}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana-data:/var/lib/grafana
    networks:
      - qbtc-network
    restart: unless-stopped

volumes:
  redis-data:
  prometheus-data:
  grafana-data:

networks:
  qbtc-network:
    driver: bridge